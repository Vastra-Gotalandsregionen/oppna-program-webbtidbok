<?xml version="1.0" encoding="UTF-8"?>
	<!--

		Copyright 2009 Vastra Gotalandsregionen This library is free software;
		you can redistribute it and/or modify it under the terms of version
		2.1 of the GNU Lesser General Public License as published by the Free
		Software Foundation. This library is distributed in the hope that it
		will be useful, but WITHOUT ANY WARRANTY; without even the implied
		warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
		the GNU Lesser General Public License for more details. You should
		have received a copy of the GNU Lesser General Public License along
		with this library; if not, write to the Free Software Foundation,
		Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
	-->

<!-- 
		
		BACKING BEANS / SPRING BEANS ARE DECLARED HERE, i.e. classes to be used thru the spring flow(s).
		
		SERVICE DEFINITIONS ARE DECLARED HERE, defines Service Id ex.: BUKAORTA, message bundle ex.: messages/bukaorta/BukAortaMessages and corresponding service ex.: elvisBookingService
		
		Each serviceDefinition should have a corresponding lookupService.
		The look up services are responsible for doing a "lookup" on each user that tries to log on to pick the correct Service Definition and its content that user should have
		
		Each differentiating WebService should have a corresponding mapper class which converts WS specific classes into our own domain objects.
		For example an Elvis Booking object is different from a Sectra RIS Booking class but both are converted by mapper classes into a Booking object defined in this application.
		That Booking object in turn is then used through out our application.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">

<!--
	TEST DATA resources loaded
	The content of these files are referenced below in beans:
	sectraMockServiceSU
	sectraMockServiceNU
	

	<import resource="testdata-su.xml" />
	<import resource="testdata-nu.xml" />
	<import resource="elvisMockConfig.xml" />
-->
	
	<!-- Scans for application @Components to deploy -->
	<context:component-scan base-package="org.springframework.webflow.samples.booking" />

	<bean id="bookingFactory" class="se.vgregion.webbtidbok.booking.BookingFactoryImpl">
		<property name="serviceDefinitions">
			<list>
				<ref bean="serviceDefinitionMammografiSU" />
				<ref bean="serviceDefinitionMammografiNU" />
				<ref bean="serviceDefinitionBukAorta" />
				<!-- TOGGLE GYN SERVICE HERE 1/4 -->
				<ref bean="serviceDefinitionGyn" />
				
			</list>
		</property>
	</bean>

	<!-- Service definitions should be moved later, but for now this will do.-->
	<bean id="serviceDefinitionMammografiSU" class="se.vgregion.webbtidbok.servicedef.ServiceDefinition">
		<property name="serviceID" value="MAMMO_SU" />
		<property name="messageBundleBase" value="messages/mammografi/MammografiMessagesSU" />
		<property name="bookingService" ref="sectraBookingService" />
	</bean>

	<bean id="serviceDefinitionMammografiNU" class="se.vgregion.webbtidbok.servicedef.ServiceDefinition">
		<property name="serviceID" value="MAMMO_NU" />
		<property name="messageBundleBase" value="messages/mammografi/MammografiMessagesNU" />
		<property name="bookingService" ref="sectraBookingService" />
	</bean>

	<!-- A service definition for bukaorta, using Elvis. -->
	<bean id="serviceDefinitionBukAorta" class="se.vgregion.webbtidbok.servicedef.ServiceDefinition">
		<property name="serviceID" value="BUKAORTA" />
		<property name="messageBundleBase" value="messages/bukaorta/BukAortaMessages" />
		<property name="bookingService" ref="elvisBookingService" />
	</bean>
	
	<!-- TOGGLE GYN SERVICE HERE 2/4 -->
	<!-- A service definition for gyn, using Elvis. -->
	<bean id="serviceDefinitionGyn" class="se.vgregion.webbtidbok.servicedef.ServiceDefinition">
		<property name="serviceID" value="GYN" />
		<property name="messageBundleBase" value="messages/gynekologi/GynekologiMessages" />
		<property name="bookingService" ref="elvisBookingService" />
	</bean>
	
	<!-- Login services. -->
	<bean id="loginService" class="se.vgregion.webbtidbok.Login">
		<property name="bookingFactory" ref="bookingFactory" />
		<property name="lookupService" ref="lookupService" />
		<property name="resourceBundle">
			<bean id="messages" class="java.util.ResourceBundle"
				factory-method="getBundle">
				<constructor-arg value="messages/BaseMessages" />
			</bean>
		</property>
	</bean>

	<!--
		validates login accordingly and also sets service matching to provided
		password into state
	-->
	<bean id="validationService" class="se.vgregion.webbtidbok.ValidationLogin">

	</bean>

	<!--
		Our lookup service. Lookups are performed in the order listed - trial
		logins (such as Elvis) should be at the bottom of the list.
	-->
	<bean id="lookupService" class="se.vgregion.webbtidbok.servicedef.ChainLookupService">
		<property name="lookupChain">
			<list>
				<ref bean="lookupServiceSU" />
				<ref bean="lookupServiceNU" />
				<ref bean="elvisLookupService" />
				
				<!-- TOGGLE GYN SERVICE HERE 3/4 -->
				<ref bean="elvisLookupServiceGyn" />
			</list>
		</property>
	</bean>

	<bean id="lookupServiceSU"
		class="se.vgregion.webbtidbok.servicedef.PasswordMatchLookupService">
		<property name="serviceDefinition" ref="serviceDefinitionMammografiSU" />
		<!--        <property name="regexp" value="^......SU..$"/>-->
		<property name="regexp" value="^SEMSUS.*$" />
	</bean>

	<bean id="lookupServiceNU"
		class="se.vgregion.webbtidbok.servicedef.PasswordMatchLookupService">
		<property name="serviceDefinition" ref="serviceDefinitionMammografiNU" />
		<property name="regexp" value="^SEMUDD.*$" />
	</bean>

<!-- TOGGLE GYN SERVICE HERE 4/4 -->
	<bean id="elvisLookupServiceGyn" class="se.vgregion.webbtidbok.servicedef.LoginLookupService">
		<property name="serviceDefinition" ref="serviceDefinitionGyn" />
	</bean>

	<bean id="elvisLookupService" class="se.vgregion.webbtidbok.servicedef.LoginLookupService">
		<property name="serviceDefinition" ref="serviceDefinitionBukAorta" />
	</bean>

	<!-- New style booking facade implementation for Elvis. -->
	<bean id="elvisBookingService"
		class="se.vgregion.webbtidbok.booking.elvis.ElvisBookingFacadeImpl">
		<property name="helper" ref="helper" />
		<property name="bookingService" ref="bookingServiceElvis" />
	</bean>
	
	<bean id="elvisMapper" class="se.vgregion.webbtidbok.booking.elvis.BookingMapperElvis" />

	<bean id="bookingServiceElvis" class="se.vgregion.webbtidbok.booking.elvis.BookingService">
		<property name="helper" ref="helper" />
		<property name="mapping" ref="elvisMapper" />
	</bean>

	<bean id="helper" class="se.vgregion.webbtidbok.booking.elvis.WebServiceHelper"
		lazy-init="false">
		<property name="encrypter" ref="stringEncrypter" />

<!-- TOGGLE ELVIS WS MOCK and MOCK DATA from elvisMockData.xml	1/2	
		<property name="elvisWebService" ref="elvisWebserviceMock" /> 
-->
<!-- TOGGLE ELVIS WS to what's specified in the current POM 2/2-->
		<property name="elvisWebService">
			<bean factory-bean="elvisWebService" factory-method="getBasicHttpBindingICentralBookingWS"/>
		</property>

	</bean>

	<bean id="elvisWebService" class="se.vgregion.webbtidbok.ws.CentralBookingWS" />
	
	<!-- END Elvis facade -->

	<!-- New style Sectra booking facade -->
	<bean id="sectraBookingService"
		class="se.vgregion.webbtidbok.booking.sectra.SectraBookingFacadeImpl">
		<property name="serviceFactory" ref="sectraBookingServiceFactory" />
	</bean>

<!-- TOGGLE SECTRA HERE  1/3. ALSO change in POM.XML -->	
	<bean id="sectraBookingServiceImpl" class="se.vgregion.webbtidbok.booking.sectra.SectraBookingServiceImpl" >
		<property name="thePort"  ref="sectraRealService">	
		</property>
	</bean>	
 	
 	<bean id="sectraNUClientFactory" class="se.vgregion.webbtidbok.ws.sectra.RISReschedule">
	    <constructor-arg type="java.net.URL" value="http://vgas0561.vgregion.se/RISReschedule/Service.svc?wsdl" />
	    <constructor-arg type="javax.xml.namespace.QName">
	        <bean class="javax.xml.namespace.QName">
	            <constructor-arg index="0" value="http://tempuri.org/" />
	            <constructor-arg index="1" value="RISReschedule" />
	        </bean>
	    </constructor-arg>
	</bean>
 	
	<bean id="sectraRealService" factory-bean="sectraClientFactory" factory-method="getBasicHttpBindingIRisReschedule" />	
	<bean id="sectraNURealService" factory-bean="sectraNUClientFactory" factory-method="getBasicHttpBindingIRisReschedule" />	
	<bean id="sectraClientFactory" class="se.vgregion.webbtidbok.ws.sectra.RISReschedule"/>
	<!-- bean id="sectraNUClientFactory" class="se.vgregion.webbtidbok.ws.sectraNU.RISReschedule"/-->
<!-- END  TOGGLE SECTRA HERE  1/3 -->
	

	
	
	<!-- Creates Sectra web service connections.
	 This class should not know anything about State - all actions here
	 should be strictly WS-specific.
	 If Sectra services should diverge for any reason (versions etc), this is
	the place to differentiate between services.-->
	
	<bean id="sectraBookingServiceFactory"
		class="se.vgregion.webbtidbok.booking.sectra.SectraBookingServiceFactory">

		<property name="portMap">
			<map>
				<entry key="MAMMO_SU" value-ref="sectraRealService" />	
				<entry key="MAMMO_NU" value-ref="sectraNURealService"/>
<!-- TOGGLE SECTRA HERE 2/3
				<entry key="MAMMO_NU" value-ref="sectraMockServiceNU" />
				<entry key="MAMMO_SU" value-ref="sectraMockServiceSU" />
END TOGGLE SECTRA HERE 2/3-->
			</map>
		</property>
		<!-- property name="portMapNU">
			<map>
				<entry key="MAMMO_NU" value-ref="sectraNURealService"/>
			</map>
		</property>
		
		<property name="portMapContainer">
			<map>
				<entry key="Mammo_SU_Map" value-ref="portMap"/>
				<entry key="Mammo_SU_Map" value-ref="portMapNU"/>
			</map>
		</property-->
		<property name="bookingMapperSectra">
			<bean class="se.vgregion.webbtidbok.booking.sectra.BookingMapperSectra" />
		</property>
		<!-- property name="bookingMapperSectraNU">
			<bean class="se.vgregion.webbtidbok.booking.sectraNU.BookingMapperSectraNU" />
		</property -->
	</bean>

<!-- SECTRA MOCK service beans 3/3 
	<bean id="sectraMockServiceNU" class="se.vgregion.webbtidbok.booking.sectra.SectraWSMock">
		<property name="businessObjectHolder">
			<bean
				class="se.vgregion.webbtidbok.booking.sectra.mock.BusinessObjectHolder">
				<constructor-arg ref="NU_sections" />
				<constructor-arg ref="NU_timeblocks" />
				<constructor-arg ref="NU_bookings" />
			</bean>
		</property>
	</bean>

	<bean id="sectraMockServiceSU" class="se.vgregion.webbtidbok.booking.sectra.SectraWSMock">
		<property name="businessObjectHolder">
			<bean
				class="se.vgregion.webbtidbok.booking.sectra.mock.BusinessObjectHolder">
				<constructor-arg ref="SU_sections" />
				<constructor-arg ref="SU_timeblocks" />
				<constructor-arg ref="SU_bookings" />
			</bean>
		</property>
	</bean>
-->	
<!-- END SECTRA MOCK service beans 3/3 -->
<!-- END sectra facade -->
	
	<!--  This class is used as a switch to choose between different BookingFacades depending on witch service that is to be utilized by the user.	-->
	<bean id="bookingFacade" class="se.vgregion.webbtidbok.booking.BookingFacadeSwitch">
		<property name="bookingFactory" ref="bookingFactory" />
	</bean>
	
	<!-- Used for sending a Crypted Key to communicate with the Elvis WebService. This crypted key is then sent along with every request to that WS -->
	<bean id="stringEncrypter" class="se.vgregion.webbtidbok.crypto.StringEncrypter">
		<property name="keyStoreFile" value="classpath:asd.pfx" />
		<property name="keyAlias"
			value="a6c21dcdd9534d742aa1bd4afae16210_956e2a3a-b426-49f4-a107-72c603d2f58c" />
		<property name="keyPassWord" value="asd" />
	</bean>
	
	<!-- Creating a calendarService bean with various calendar related utilities -->
	<bean id="calendarService" class="se.vgregion.webbtidbok.calendar.CalendarUtil">
		<property name="bookingFacade" ref="bookingFacade" />
	</bean>

	<bean id="loggingAdvice" class="se.vgregion.webbtidbok.logging.LoggingAdvice" />
	<aop:config>
		<aop:aspect ref="loggingAdvice">
			<aop:pointcut id="loggingBookingServ"
				expression="execution(* se.vgregion.webbtidbok.booking.elvis.BookingService.*(..))" />
			<aop:around method="around" pointcut-ref="loggingBookingServ" />
		</aop:aspect>
	</aop:config>
	
	<!-- Creating the thread pool and the executor the the threads used to mail cancellation and switch location mails with	-->
    <bean id="mailQueue" class="java.util.concurrent.ThreadPoolExecutor">
        <constructor-arg index="0" type="int" value="1"/> <!-- Minimum threads -->
        <constructor-arg index="1" type="int" value="4"/> <!-- Maximum threads -->
        <constructor-arg index="2" type="long" value="30"/> <!-- Surplus thread keep-alive time, in seconds (see below) -->
        <constructor-arg index="3" type="java.util.concurrent.TimeUnit" value="SECONDS"/>
        <constructor-arg index="4"> <!-- We use a linked list queue, which should be unbounded. -->
            <bean class="java.util.concurrent.LinkedBlockingQueue" />
        </constructor-arg>
    </bean>

	
	<!-- Utility bean for dumping methods we don't have a proper home for. -->	
	<bean id="guiUtility" class="se.vgregion.webbtidbok.gui.GUIUtilities">
		<property name="bookingFacade" ref="bookingFacade" />
	</bean>

	<!-- Flow handler handling exceptions for the 'login' flow. -->
	<bean name="login"
		class="se.vgregion.webbtidbok.errorhandling.ExceptionFlowHandler">
	</bean>

	<!-- Imports the configurations of the different infrastructure systems of the application	-->
	<import resource="webflow-config.xml" />
	<import resource="webmvc-config.xml" />
</beans>