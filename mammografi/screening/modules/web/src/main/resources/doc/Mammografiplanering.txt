====
    Copyright 2009 Vastra Gotalandsregionen

      This library is free software; you can redistribute it and/or modify
      it under the terms of version 2.1 of the GNU Lesser General Public
      License as published by the Free Software Foundation.

      This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.

      You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the
      Free Software Foundation, Inc., 59 Temple Place, Suite 330,
      Boston, MA 02111-1307  USA
====
Recommendations for Mammografi
------------------------------
1. Draw diagrams for all flows prior to coding.
Drawing a diagram describing a flow prior to coding enables me to:
- Get a better overview of the flow.
- Discover "loose ends" in the flow.
For instance, one or more missing transitions.
- Clarifies the structure of the flow.
Which in turn helps me to discover any sub-flows.
- Makes writing flow unit test easier.

2. Structure flows.
For me, structuring flows is closely related to drawing diagrams of the flows.
Separate activities in separate flows.
- Subflows.
- Parent flows.
A flow can inherit from one or more flows.
- State level inheritance.
A state inherits from a single state of the same type in a (single) parent flow.
- Abstract flows.

3. Before writing the flow, write unit test for the flow.

4. Scope variables in the flow correctly.
The shorter life-span a variable has, the better.

6. Services should be stateless and thread-safe.

7. Structure for flows with service, view-service and view.

8. All flows must have an end state.

9. Minimize processing etc in the flow definition file.

- Each state only uses the corresponding state service, alternatively the corresponding flow service.
For larger, more complex flows, each state can have a corresponding service implemented as a Spring bean.
For smaller flows, all the states in the flow can use one and the same service.
These service resides in the presentation layer and may have dependencies to Spring Web Flow or to the presentation technology used.
Their main responsibillity is to delegate work to services in the service layer and to perform adaption of data needed prior to presentation.



